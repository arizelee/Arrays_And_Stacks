//This class is the Stack ADT.

// StackADT.java
// The classic Stack interface.
// ***************************************************************
public interface StackADT
{
// ---------------------------------------------------
// Adds a new element to the top of the stack.
// ---------------------------------------------------
public void push(Object val);
// ---------------------------------------------------
// Removes and returns the element at the top of the stack.
// ---------------------------------------------------
public Object pop();
// ---------------------------------------------------
// Returns true if stack is empty, false otherwise.
// ---------------------------------------------------
public boolean isEmpty();
// ---------------------------------------------------
// Returns true if stack is full, false otherwise.
// ---------------------------------------------------
public boolean isFull();
}

____________________________________________________________________

//This class is the Stack implementation.

public class ArrayStack implements StackADT {
private int stackSize = 5; // capacity of stack
private int top; // index of slot for next element
private Object[] elements;
// ---------------------------------------------------
// Constructor -- initializes top and creates array
// ---------------------------------------------------
public ArrayStack(){
    elements = new Object[stackSize];
    top = -1;
}
// --------------------------------------------------
// Adds element to top of stack if it's not full, else
// does nothing.
// --------------------------------------------------
public void push(Object val){
    if (top == elements.length-1){ }
    
    else{
      //  top += 1;
        elements[++top] = val;
    }
}
// ---------------------------------------------------
// Removes and returns value at top of stack. If stack
// is empty returns null.
// ---------------------------------------------------
public Object pop(){
    if (top < 0) {return null; }
    else {
    return elements[top--];
    }
}
// ---------------------------------------------------
// Returns true if stack is empty, false otherwise.
// ---------------------------------------------------
public boolean isEmpty(){
    if (top < 0) return true;
    else return false;
}
// ---------------------------------------------------
// Returns true if stack is full, false otherwise.
// ---------------------------------------------------
public boolean isFull(){
    if (top == elements.length-1) return true;
    else return false;
}
}
